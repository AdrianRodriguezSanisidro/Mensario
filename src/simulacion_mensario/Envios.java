/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulacion_mensario;

import es.xilon.semApi.*;
import es.xilon.semApi.beans.*;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.sql.Array;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import static simulacion_mensario.CrearGrupo.*;
import static simulacion_mensario.Envios.stmt;
import static simulacion_mensario.Plantilla.borrarPlantilla;
import static simulacion_mensario.Plantilla.comboVariablesPlantilla;
import static simulacion_mensario.Plantilla.mostrarTablaPlantillas;

/**
 *
 * @author adrys
 */
public class Envios extends javax.swing.JFrame {

    public static final String alfabetoRemitente = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ";
    public static final String alfabetoGSM = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzÄÖÜÉØÅÆÑÇäöüàèìòùéøåæñ§ßΓ∆ΘΛΞΠΣΦΨΩ .,'?!_:;\"¿¡+-*/=\\<>()[]{}^~|@%#&¤$£€¥\n\r";
    public static final String alfabeto="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    public static ApiResponseBean apiResponse = null;
    public static ApiResponseBean apiResponseSaldo = null;
    public static SemApi semApi;
    public static String auxComprobarGrupo = "Todos";
    public static Connection c;
    public static Statement stmt;
    public static ResultSet rs;
    public static Connection c2;
    public static Statement stmt2;
    public static ResultSet rs2;
    public static String cambioMovilElegido;
    public static String columnaABorrar;
    public static int numColumnaABorrar;

    /**
     * Creates new form Envios
     */
    public Envios() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("logo.png")));
        this.setLocationRelativeTo(null);//Centrar ventana
        //Inicio del hilo
        Hilo objHilo = new Hilo();
        objHilo.start();
        mostrarDatosTLicencias();
        mostrarGruposCombo();
        Plantilla.mostrarTablaPlantillas();
        mostrarDatosTContactos();
        mostrarVariablesCombo(comboVariablesTexto);
        //Permite ordenar los datos
        tablaContactos.setAutoCreateRowSorter(true);
        tablaLicencias.setAutoCreateRowSorter(true);
        tablaPlantillas.setAutoCreateRowSorter(true);
        //Impide que se muevan las columnas de posición
        tablaContactos.getTableHeader().setReorderingAllowed(false);
        tablaLicencias.getTableHeader().setReorderingAllowed(false);
        tablaPlantillas.getTableHeader().setReorderingAllowed(false);

        //Quitar autoscroll horizontal
        txtAreaMensaje.setLineWrap(true);
        txtAreaMensaje.setWrapStyleWord(true);
        txtAreaMoviles.setLineWrap(true);
        txtAreaMoviles.setWrapStyleWord(true);
        txtAreaPlantilla.setLineWrap(true);
        txtAreaPlantilla.setWrapStyleWord(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TPEscribirSms = new javax.swing.JTabbedPane();
        panelEnvios = new javax.swing.JPanel();
        lblNombreUsr = new javax.swing.JLabel();
        lblNombreRemitente = new javax.swing.JLabel();
        lblSaldoName = new javax.swing.JLabel();
        lblSaldo = new javax.swing.JLabel();
        txtNombreRemitente = new javax.swing.JTextField();
        IFDestinatario = new javax.swing.JInternalFrame();
        lblMoviles = new javax.swing.JLabel();
        jScrollPaneMoviles = new javax.swing.JScrollPane();
        txtAreaMoviles = new javax.swing.JTextArea();
        lblMovilesInsertadosName = new javax.swing.JLabel();
        btnEliminarMoviles = new javax.swing.JButton();
        lblMovilesInsertados = new javax.swing.JLabel();
        IFMensaje = new javax.swing.JInternalFrame();
        lblTexto = new javax.swing.JLabel();
        jScrollPaneTexto = new javax.swing.JScrollPane();
        txtAreaMensaje = new javax.swing.JTextArea();
        lblNumMensajesName = new javax.swing.JLabel();
        lblNumCaracteresName = new javax.swing.JLabel();
        btnEliminarTexto = new javax.swing.JButton();
        lblNumMensajes = new javax.swing.JLabel();
        lblNumCaracteres = new javax.swing.JLabel();
        comboVariablesTexto = new javax.swing.JComboBox<>();
        btnAñadirVariable = new javax.swing.JButton();
        CheckEnvioProgramado = new javax.swing.JCheckBox();
        lblHoraEnvio = new javax.swing.JLabel();
        btnEnviar = new javax.swing.JButton();
        comboHoraEnvio = new javax.swing.JComboBox<>();
        comboMinEnvio = new javax.swing.JComboBox<>();
        comboSegEnvio = new javax.swing.JComboBox<>();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        panelLicencias = new javax.swing.JPanel();
        scrollTable = new javax.swing.JScrollPane();
        tablaLicencias = new javax.swing.JTable();
        lblLicencia = new javax.swing.JLabel();
        txtLicencia = new javax.swing.JTextField();
        lblUsuario = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lblClave = new javax.swing.JLabel();
        txtClave = new javax.swing.JTextField();
        btnAñadirLicencia = new javax.swing.JButton();
        btnBuscarLicencia = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnUtilizarLicencia = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        panelContactos = new javax.swing.JPanel();
        comboElegirGrupo = new javax.swing.JComboBox<>();
        lblNombreTabla = new javax.swing.JLabel();
        scrollContactos = new javax.swing.JScrollPane();
        tablaContactos = new javax.swing.JTable();
        btnBorrarGrupo = new javax.swing.JButton();
        btnCrearGrupo = new javax.swing.JButton();
        IFContactos = new javax.swing.JInternalFrame();
        btnAñadirContacto = new javax.swing.JButton();
        btnEliminarContacto = new javax.swing.JButton();
        comboPais = new javax.swing.JComboBox<>();
        lblPais = new javax.swing.JLabel();
        txtMovilContacto = new javax.swing.JTextField();
        lblMovil = new javax.swing.JLabel();
        txtNombreContacto = new javax.swing.JTextField();
        lblNombreContacto = new javax.swing.JLabel();
        btnLimpiarNombreC = new javax.swing.JButton();
        btnLimpiarMovilC = new javax.swing.JButton();
        btnModificarContacto = new javax.swing.JButton();
        btnBuscarMovil = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        btnEscribirContacto = new javax.swing.JButton();
        btnEscribirGrupo = new javax.swing.JButton();
        btnDesordenar = new javax.swing.JButton();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        btnAñadirAlGrupo = new javax.swing.JButton();
        comboAñadirAlGrupo = new javax.swing.JComboBox<>();
        btnEliminarDelGrupo = new javax.swing.JButton();
        btnBorrarColumna = new javax.swing.JButton();
        btnAñadirColumna = new javax.swing.JButton();
        panelPlantillas = new javax.swing.JPanel();
        jScrollPaneTablaPlantillas = new javax.swing.JScrollPane();
        tablaPlantillas = new javax.swing.JTable();
        jScrollPaneTextoPlantilla = new javax.swing.JScrollPane();
        txtAreaPlantilla = new javax.swing.JTextArea();
        btnNuevaPlantilla = new javax.swing.JButton();
        btnModificarPlantilla = new javax.swing.JButton();
        btnEliminarPlantilla = new javax.swing.JButton();
        btnUtilizarPlantilla = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mensario 2");
        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(880, 880));
        setSize(new java.awt.Dimension(720, 777));

        TPEscribirSms.setBackground(new java.awt.Color(255, 255, 255));
        TPEscribirSms.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        TPEscribirSms.setOpaque(true);
        TPEscribirSms.setPreferredSize(new java.awt.Dimension(710, 777));

        panelEnvios.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        panelEnvios.setPreferredSize(new java.awt.Dimension(705, 777));

        lblNombreUsr.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblNombreUsr.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Está utilizando la licencia:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 11))); // NOI18N

        lblNombreRemitente.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblNombreRemitente.setText("Nombre de remitente:");

        lblSaldoName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblSaldoName.setText("Saldo disponible:");

        txtNombreRemitente.setToolTipText("");

        IFDestinatario.setTitle("Destianatario");
        IFDestinatario.setVisible(true);

        lblMoviles.setText("Móviles:");

        txtAreaMoviles.setColumns(20);
        txtAreaMoviles.setRows(5);
        txtAreaMoviles.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAreaMovilesKeyTyped(evt);
            }
        });
        jScrollPaneMoviles.setViewportView(txtAreaMoviles);

        lblMovilesInsertadosName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMovilesInsertadosName.setText("Número de moviles insertados:");

        btnEliminarMoviles.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\rsz_limpiar.jpg")); // NOI18N
        btnEliminarMoviles.setText("Limpiar texto");
        btnEliminarMoviles.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminarMoviles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarMovilesMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout IFDestinatarioLayout = new javax.swing.GroupLayout(IFDestinatario.getContentPane());
        IFDestinatario.getContentPane().setLayout(IFDestinatarioLayout);
        IFDestinatarioLayout.setHorizontalGroup(
            IFDestinatarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneMoviles)
            .addGroup(IFDestinatarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(IFDestinatarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(IFDestinatarioLayout.createSequentialGroup()
                        .addComponent(lblMovilesInsertadosName)
                        .addGap(5, 5, 5)
                        .addComponent(lblMovilesInsertados, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEliminarMoviles, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5))
                    .addGroup(IFDestinatarioLayout.createSequentialGroup()
                        .addComponent(lblMoviles)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        IFDestinatarioLayout.setVerticalGroup(
            IFDestinatarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IFDestinatarioLayout.createSequentialGroup()
                .addComponent(lblMoviles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneMoviles, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(IFDestinatarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMovilesInsertadosName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMovilesInsertados, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminarMoviles))
                .addGap(5, 5, 5))
        );

        IFMensaje.setTitle("Mensaje");
        IFMensaje.setVisible(true);

        lblTexto.setText("Texto:");

        txtAreaMensaje.setColumns(20);
        txtAreaMensaje.setRows(5);
        jScrollPaneTexto.setViewportView(txtAreaMensaje);

        lblNumMensajesName.setText("Número de mensajes:");

        lblNumCaracteresName.setText("Número de caracteres: ");

        btnEliminarTexto.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\rsz_limpiar.jpg")); // NOI18N
        btnEliminarTexto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminarTexto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarTextoMouseClicked(evt);
            }
        });

        lblNumMensajes.setText("1");

        comboVariablesTexto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "{#Nombre}", "{#Paìs}", "{#Remitente}", "{#Teléfono}" }));

        btnAñadirVariable.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\rsz_plus.jpg")); // NOI18N
        btnAñadirVariable.setText("Añadir");
        btnAñadirVariable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAñadirVariable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAñadirVariableMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout IFMensajeLayout = new javax.swing.GroupLayout(IFMensaje.getContentPane());
        IFMensaje.getContentPane().setLayout(IFMensajeLayout);
        IFMensajeLayout.setHorizontalGroup(
            IFMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneTexto)
            .addGroup(IFMensajeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(IFMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(IFMensajeLayout.createSequentialGroup()
                        .addComponent(lblTexto)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(IFMensajeLayout.createSequentialGroup()
                        .addComponent(lblNumMensajesName)
                        .addGap(5, 5, 5)
                        .addComponent(lblNumMensajes, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                        .addComponent(lblNumCaracteresName)
                        .addGap(5, 5, 5)
                        .addComponent(lblNumCaracteres, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                        .addComponent(comboVariablesTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAñadirVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addComponent(btnEliminarTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5))))
        );
        IFMensajeLayout.setVerticalGroup(
            IFMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IFMensajeLayout.createSequentialGroup()
                .addComponent(lblTexto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(IFMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(IFMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboVariablesTexto)
                        .addComponent(btnAñadirVariable))
                    .addGroup(IFMensajeLayout.createSequentialGroup()
                        .addGroup(IFMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(IFMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblNumCaracteres, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IFMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblNumMensajes, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblNumMensajesName)
                                    .addComponent(lblNumCaracteresName)))
                            .addComponent(btnEliminarTexto))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(5, 5, 5))
        );

        CheckEnvioProgramado.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CheckEnvioProgramado.setText("Envio programado");
        CheckEnvioProgramado.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        lblHoraEnvio.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHoraEnvio.setText("Hora de envio:");

        btnEnviar.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\enviar.png")); // NOI18N
        btnEnviar.setText("Enviar");
        btnEnviar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEnviar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEnviarMouseClicked(evt);
            }
        });

        comboHoraEnvio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        comboMinEnvio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        comboSegEnvio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        jCalendar1.setDecorationBordersVisible(true);

        javax.swing.GroupLayout panelEnviosLayout = new javax.swing.GroupLayout(panelEnvios);
        panelEnvios.setLayout(panelEnviosLayout);
        panelEnviosLayout.setHorizontalGroup(
            panelEnviosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblNombreUsr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelEnviosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEnviosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEnviosLayout.createSequentialGroup()
                        .addComponent(lblNombreRemitente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombreRemitente, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblSaldoName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))
                    .addGroup(panelEnviosLayout.createSequentialGroup()
                        .addComponent(CheckEnvioProgramado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblHoraEnvio)
                        .addGap(11, 11, 11)
                        .addComponent(comboHoraEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboMinEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboSegEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(panelEnviosLayout.createSequentialGroup()
                        .addGroup(panelEnviosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(IFMensaje)
                            .addComponent(IFDestinatario))
                        .addContainerGap())))
        );
        panelEnviosLayout.setVerticalGroup(
            panelEnviosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEnviosLayout.createSequentialGroup()
                .addComponent(lblNombreUsr, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(panelEnviosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEnviosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblNombreRemitente, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtNombreRemitente, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblSaldoName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelEnviosLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(lblSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IFDestinatario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IFMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelEnviosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEnviosLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelEnviosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEnviar)
                            .addComponent(comboSegEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboMinEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboHoraEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHoraEnvio)))
                    .addGroup(panelEnviosLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(CheckEnvioProgramado))
                    .addGroup(panelEnviosLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        TPEscribirSms.addTab("Enviar", new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\rsz_envios.jpg"), panelEnvios); // NOI18N

        panelLicencias.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        panelLicencias.setPreferredSize(new java.awt.Dimension(705, 777));

        scrollTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tablaLicencias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número de serie", "Usuario", "Clave", "Nombre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaLicencias.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tablaLicencias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaLicenciasMouseClicked(evt);
            }
        });
        scrollTable.setViewportView(tablaLicencias);

        lblLicencia.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblLicencia.setText("Licencia:");

        lblUsuario.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblUsuario.setText("Usuario:");

        lblNombre.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblNombre.setText("Nombre:");

        lblClave.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblClave.setText("Clave:");

        btnAñadirLicencia.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\rsz_plus.jpg")); // NOI18N
        btnAñadirLicencia.setText("Añadir licencia");
        btnAñadirLicencia.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAñadirLicencia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAñadirLicenciaMouseClicked(evt);
            }
        });

        btnBuscarLicencia.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\lupa.png")); // NOI18N
        btnBuscarLicencia.setText("Buscar nombre");
        btnBuscarLicencia.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBuscarLicencia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBuscarLicenciaMouseClicked(evt);
            }
        });

        btnLimpiar.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\rsz_limpiar.jpg")); // NOI18N
        btnLimpiar.setText("Limpiar campos");
        btnLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpiar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLimpiarMouseClicked(evt);
            }
        });

        btnUtilizarLicencia.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\rsz_check.jpg")); // NOI18N
        btnUtilizarLicencia.setText("Utilizar licencia");
        btnUtilizarLicencia.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUtilizarLicencia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUtilizarLicenciaMouseClicked(evt);
            }
        });

        btnEliminar.setForeground(new java.awt.Color(255, 0, 0));
        btnEliminar.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\papelera.jpg")); // NOI18N
        btnEliminar.setText("Eliminar licencia");
        btnEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelLicenciasLayout = new javax.swing.GroupLayout(panelLicencias);
        panelLicencias.setLayout(panelLicenciasLayout);
        panelLicenciasLayout.setHorizontalGroup(
            panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLicenciasLayout.createSequentialGroup()
                .addGroup(panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelLicenciasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator3))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelLicenciasLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(scrollTable))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelLicenciasLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblLicencia, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtLicencia)
                            .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addGroup(panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblClave, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtClave)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 87, Short.MAX_VALUE)
                        .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 69, Short.MAX_VALUE)))
                .addGap(5, 5, 5))
            .addGroup(panelLicenciasLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAñadirLicencia, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUtilizarLicencia, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBuscarLicencia, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelLicenciasLayout.setVerticalGroup(
            panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLicenciasLayout.createSequentialGroup()
                .addComponent(scrollTable, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLicenciasLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLicenciasLayout.createSequentialGroup()
                                .addGroup(panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblLicencia, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtLicencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelLicenciasLayout.createSequentialGroup()
                                .addGroup(panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblClave, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelLicenciasLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)))
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUtilizarLicencia, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarLicencia, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(panelLicenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAñadirLicencia, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        TPEscribirSms.addTab("Licencias", new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\licencia.png"), panelLicencias); // NOI18N

        panelContactos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        panelContactos.setPreferredSize(new java.awt.Dimension(705, 777));

        lblNombreTabla.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblNombreTabla.setText("Grupo");

        scrollContactos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tablaContactos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Movil", "Nombre", "Pais"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaContactos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaContactosMouseClicked(evt);
            }
        });
        scrollContactos.setViewportView(tablaContactos);

        btnBorrarGrupo.setForeground(new java.awt.Color(204, 0, 0));
        btnBorrarGrupo.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\papelera.jpg")); // NOI18N
        btnBorrarGrupo.setText("Eliminar grupo");
        btnBorrarGrupo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBorrarGrupo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBorrarGrupoMouseClicked(evt);
            }
        });

        btnCrearGrupo.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\rsz_plus.jpg")); // NOI18N
        btnCrearGrupo.setText("Crear grupo");
        btnCrearGrupo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCrearGrupo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCrearGrupoMouseClicked(evt);
            }
        });

        IFContactos.setTitle("Contacto");
        IFContactos.setVisible(true);

        btnAñadirContacto.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\add_user.png")); // NOI18N
        btnAñadirContacto.setText("Añadir contacto");
        btnAñadirContacto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAñadirContacto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAñadirContactoMouseClicked(evt);
            }
        });

        btnEliminarContacto.setForeground(new java.awt.Color(204, 0, 0));
        btnEliminarContacto.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\borrar_contacto.png")); // NOI18N
        btnEliminarContacto.setText("Eliminar contacto");
        btnEliminarContacto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminarContacto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarContactoMouseClicked(evt);
            }
        });

        comboPais.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alemania", "Andorra", "Austria", "Bélgica", "Bosnia", "Bulgaria", "Chipre", "Croacia", "Dinamarca", "Eslovaquia", "Eslovenia", "España", "Estonia", "Finlandia", "Francia", "Grecia", "Hungría ", "Irlanda", "Islandia", "Italia", "Letonia", "Lituania", "Luxemburgo", "Malta", "Montenegro", "Noruega", "Países Bajos", "Polonia", "Portugal", "Reino Unido", "República Checa", "Rumanía", "Rusia", "Serbia-Kosovo", "Suecia", "Suiza", "Turquía", "Ucrania" }));

        lblPais.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPais.setText("País:");

        txtMovilContacto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMovilContactoKeyTyped(evt);
            }
        });

        lblMovil.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMovil.setText("Móvil:");

        lblNombreContacto.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblNombreContacto.setText("Nombre:");

        btnLimpiarNombreC.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\rsz_limpiar.jpg")); // NOI18N
        btnLimpiarNombreC.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpiarNombreC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLimpiarNombreCMouseClicked(evt);
            }
        });

        btnLimpiarMovilC.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\rsz_limpiar.jpg")); // NOI18N
        btnLimpiarMovilC.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpiarMovilC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLimpiarMovilCMouseClicked(evt);
            }
        });

        btnModificarContacto.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\user.png")); // NOI18N
        btnModificarContacto.setText("Modificar contacto");
        btnModificarContacto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnModificarContacto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnModificarContactoMouseClicked(evt);
            }
        });

        btnBuscarMovil.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\lupa.png")); // NOI18N
        btnBuscarMovil.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBuscarMovil.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBuscarMovilMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout IFContactosLayout = new javax.swing.GroupLayout(IFContactos.getContentPane());
        IFContactos.getContentPane().setLayout(IFContactosLayout);
        IFContactosLayout.setHorizontalGroup(
            IFContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IFContactosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(IFContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(IFContactosLayout.createSequentialGroup()
                        .addComponent(lblNombreContacto, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombreContacto, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(btnLimpiarNombreC, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblMovil, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMovilContacto, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(btnLimpiarMovilC, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscarMovil, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(IFContactosLayout.createSequentialGroup()
                        .addComponent(btnAñadirContacto, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnModificarContacto, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(IFContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(IFContactosLayout.createSequentialGroup()
                        .addComponent(lblPais)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboPais, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnEliminarContacto, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );
        IFContactosLayout.setVerticalGroup(
            IFContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IFContactosLayout.createSequentialGroup()
                .addGroup(IFContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnLimpiarMovilC)
                    .addComponent(btnLimpiarNombreC)
                    .addGroup(IFContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblNombreContacto, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtNombreContacto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblMovil, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtMovilContacto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboPais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPais, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnBuscarMovil))
                .addGap(5, 5, 5)
                .addGroup(IFContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminarContacto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAñadirContacto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModificarContacto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        btnEscribirContacto.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\rsz_envios.jpg")); // NOI18N
        btnEscribirContacto.setText("Escribir al contacto");
        btnEscribirContacto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEscribirContacto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEscribirContactoMouseClicked(evt);
            }
        });

        btnEscribirGrupo.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\rsz_envios.jpg")); // NOI18N
        btnEscribirGrupo.setText("Escribir a todo el grupo");
        btnEscribirGrupo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEscribirGrupo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEscribirGrupoMouseClicked(evt);
            }
        });

        btnDesordenar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDesordenar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDesordenarMouseClicked(evt);
            }
        });

        jInternalFrame1.setTitle("Grupo");
        jInternalFrame1.setVisible(true);

        btnAñadirAlGrupo.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\add_user.png")); // NOI18N
        btnAñadirAlGrupo.setText("Añadir contacto/s al grupo:");
        btnAñadirAlGrupo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAñadirAlGrupo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAñadirAlGrupoMouseClicked(evt);
            }
        });

        btnEliminarDelGrupo.setForeground(new java.awt.Color(204, 0, 0));
        btnEliminarDelGrupo.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\rsz_echarcon.jpg")); // NOI18N
        btnEliminarDelGrupo.setText("Echar contacto/s del grupo");
        btnEliminarDelGrupo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminarDelGrupo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarDelGrupoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(btnAñadirAlGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboAñadirAlGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 173, Short.MAX_VALUE)
                .addComponent(btnEliminarDelGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAñadirAlGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboAñadirAlGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminarDelGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        btnBorrarColumna.setBackground(new java.awt.Color(255, 255, 255));
        btnBorrarColumna.setForeground(new java.awt.Color(204, 0, 0));
        btnBorrarColumna.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\delete_column.png")); // NOI18N
        btnBorrarColumna.setText("Borrar columna");
        btnBorrarColumna.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBorrarColumna.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBorrarColumnaMouseClicked(evt);
            }
        });

        btnAñadirColumna.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\add_column.png")); // NOI18N
        btnAñadirColumna.setText("Añadir columna");
        btnAñadirColumna.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAñadirColumna.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAñadirColumnaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelContactosLayout = new javax.swing.GroupLayout(panelContactos);
        panelContactos.setLayout(panelContactosLayout);
        panelContactosLayout.setHorizontalGroup(
            panelContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelContactosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jInternalFrame1)
                    .addComponent(IFContactos)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelContactosLayout.createSequentialGroup()
                        .addComponent(lblNombreTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboElegirGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCrearGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBorrarGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelContactosLayout.createSequentialGroup()
                        .addGroup(panelContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(scrollContactos)
                            .addGroup(panelContactosLayout.createSequentialGroup()
                                .addComponent(btnAñadirColumna, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBorrarColumna, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(2, 2, 2)
                        .addComponent(btnDesordenar, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelContactosLayout.createSequentialGroup()
                        .addComponent(btnEscribirContacto, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEscribirGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        panelContactosLayout.setVerticalGroup(
            panelContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContactosLayout.createSequentialGroup()
                .addGroup(panelContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelContactosLayout.createSequentialGroup()
                        .addGroup(panelContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboElegirGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNombreTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7))
                    .addGroup(panelContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCrearGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnBorrarGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(panelContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAñadirColumna, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBorrarColumna, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(panelContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDesordenar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scrollContactos, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IFContactos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(panelContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelContactosLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btnEscribirContacto, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelContactosLayout.createSequentialGroup()
                        .addComponent(btnEscribirGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        TPEscribirSms.addTab("Contactos", new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\usuarios.jpg"), panelContactos); // NOI18N

        panelPlantillas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        panelPlantillas.setPreferredSize(new java.awt.Dimension(705, 777));

        jScrollPaneTablaPlantillas.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 153, 255), new java.awt.Color(0, 153, 153)), "Plantillas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        tablaPlantillas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre de plantilla", "Texto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaPlantillas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaPlantillasMouseClicked(evt);
            }
        });
        jScrollPaneTablaPlantillas.setViewportView(tablaPlantillas);

        jScrollPaneTextoPlantilla.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(0, 153, 255), new java.awt.Color(0, 153, 153)), "Texto", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        jScrollPaneTextoPlantilla.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtAreaPlantilla.setEditable(false);
        txtAreaPlantilla.setColumns(20);
        txtAreaPlantilla.setRows(5);
        jScrollPaneTextoPlantilla.setViewportView(txtAreaPlantilla);

        btnNuevaPlantilla.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\rsz_plus.jpg")); // NOI18N
        btnNuevaPlantilla.setText("Nueva plantilla");
        btnNuevaPlantilla.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNuevaPlantilla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNuevaPlantillaMouseClicked(evt);
            }
        });

        btnModificarPlantilla.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\modify.png")); // NOI18N
        btnModificarPlantilla.setText("Modificar plantilla");
        btnModificarPlantilla.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnModificarPlantilla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnModificarPlantillaMouseClicked(evt);
            }
        });

        btnEliminarPlantilla.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\minus.png")); // NOI18N
        btnEliminarPlantilla.setText("Eliminar plantilla");
        btnEliminarPlantilla.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminarPlantilla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarPlantillaMouseClicked(evt);
            }
        });

        btnUtilizarPlantilla.setIcon(new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\rsz_check.jpg")); // NOI18N
        btnUtilizarPlantilla.setText("Utilizar");
        btnUtilizarPlantilla.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUtilizarPlantilla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUtilizarPlantillaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelPlantillasLayout = new javax.swing.GroupLayout(panelPlantillas);
        panelPlantillas.setLayout(panelPlantillasLayout);
        panelPlantillasLayout.setHorizontalGroup(
            panelPlantillasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPlantillasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPlantillasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPlantillasLayout.createSequentialGroup()
                        .addComponent(btnUtilizarPlantilla, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNuevaPlantilla, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnModificarPlantilla, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEliminarPlantilla, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPaneTablaPlantillas, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPaneTextoPlantilla))
                .addContainerGap())
        );
        panelPlantillasLayout.setVerticalGroup(
            panelPlantillasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPlantillasLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPaneTablaPlantillas, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jScrollPaneTextoPlantilla, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelPlantillasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEliminarPlantilla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnModificarPlantilla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNuevaPlantilla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUtilizarPlantilla, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TPEscribirSms.addTab("Plantillas", new javax.swing.ImageIcon("C:\\Users\\adrys\\Documents\\NetBeansProjects\\Simulacion_Mensario\\iconos\\notepad.png"), panelPlantillas); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TPEscribirSms, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TPEscribirSms, javax.swing.GroupLayout.PREFERRED_SIZE, 839, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        TPEscribirSms.getAccessibleContext().setAccessibleName("Envios");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarMovilesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarMovilesMouseClicked
        txtAreaMoviles.setText("");
    }//GEN-LAST:event_btnEliminarMovilesMouseClicked

    private void btnEliminarTextoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarTextoMouseClicked
        txtAreaMensaje.setText("");
    }//GEN-LAST:event_btnEliminarTextoMouseClicked

    private void btnEnviarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEnviarMouseClicked
        if ((comprobarGSM(cambiarCaracteres(txtAreaMensaje.getText())) == true) && (comprobarRemitente(txtNombreRemitente.getText()) == true)) {
            try {
                //Separar el contenido para comprobar los telefonos de forma individual
                String[] contador = txtAreaMoviles.getText().split(",");
                //Set recipients
                ArrayList<ApiRecipientBean> recipients = new ArrayList<>();
                for (int i = 0; i < Integer.parseInt(Hilo.comprobarTelefonos()); i++) {
                    String[] separarPrefijo = contador[i].split("/");
                    ApiRecipientBean recipient = new ApiRecipientBean();
                    recipient.setCode(separarPrefijo[0]);
                    recipient.setPhone(separarPrefijo[1]);
                    HashMap<String, String> hmap = new HashMap<>();
                    recipient.setParameters(crearHashmap(hmap, separarPrefijo[1]));
                    recipients.add(recipient);
                }
                //Set message data
                ArrayList<ApiMessageBean> sendings = new ArrayList<>();
                ApiMessageBean message = new ApiMessageBean();
                message.setRecipients(recipients);
                message.setSender(txtNombreRemitente.getText());
                message.setText(cambiarCaracteres(txtAreaMensaje.getText()));
                message.setDate(conseguirFecha());
                sendings.add(message);

                apiResponse = semApi.executeSending(sendings);
                refrescarSaldo();
                if (apiResponse.getResult().equals("OK")) {

                    JOptionPane.showMessageDialog(this, "Id de petición: " + apiResponse.getRequest() + "\n" + "Id de mensaje: " + apiResponse.getIds().get(0), "Envío", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    System.err.println(apiResponse.getResult());
                }
            } catch (Exception ex) {
                Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Hay caracteres invalidos en el mensaje o el remitente,los caracteres validos son:\nPara el remitente: " + alfabetoRemitente + "\nPara el mensaje: " + alfabetoGSM, "¡ATENCIÓN!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEnviarMouseClicked

    private void btnAñadirLicenciaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAñadirLicenciaMouseClicked
        añadirLicencia();
    }//GEN-LAST:event_btnAñadirLicenciaMouseClicked

    private void tablaLicenciasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaLicenciasMouseClicked
        seleccionarLineaLicencias();
    }//GEN-LAST:event_tablaLicenciasMouseClicked

    private void btnEliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarMouseClicked
        int yesNoButton = JOptionPane.YES_NO_OPTION;
        int returnVal = JOptionPane.showConfirmDialog(null,
                "La licencia será borrada de forma permanente,¿estás seguro de eliminarla?", "¡CUIDADO!", yesNoButton);
        if (returnVal == JOptionPane.YES_OPTION) {
            eliminarLicencia();
            limpiarTxt();
        }
    }//GEN-LAST:event_btnEliminarMouseClicked

    private void btnLimpiarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLimpiarMouseClicked
        limpiarTxt();
    }//GEN-LAST:event_btnLimpiarMouseClicked

    private void btnBuscarLicenciaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBuscarLicenciaMouseClicked
        if(txtNombre.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Debes introducir un nombre de licencia","¡ATENCIÓN!",JOptionPane.ERROR_MESSAGE);
        }else{
            if(buscarLicencia()==-1){
                    JOptionPane.showMessageDialog(null,"La licencia que busca nó está agregada", "¡ATENCIÓN", JOptionPane.ERROR_MESSAGE);
            }else{
                tablaLicencias.setRowSelectionInterval(buscarLicencia(), buscarLicencia());
                scrollToSelectedRow(tablaLicencias);
            }
        }
    }//GEN-LAST:event_btnBuscarLicenciaMouseClicked

    private void btnUtilizarLicenciaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUtilizarLicenciaMouseClicked
        try {
            String numLicencia=(String) tablaLicencias.getValueAt(tablaLicencias.getSelectedRow(),0);
            String nUser=(String) tablaLicencias.getValueAt(tablaLicencias.getSelectedRow(),1);
            String clave=(String) tablaLicencias.getValueAt(tablaLicencias.getSelectedRow(),2);
            String nombre=(String) tablaLicencias.getValueAt(tablaLicencias.getSelectedRow(),3);
            semApi = new SemApi(numLicencia, nUser, clave, "es.servicios.mensario.com", 443);
            apiResponse = semApi.executeSynchronization();
            if (apiResponse.getResult().equals("OK")) {
                semApi.setTimezone("Europe/Madrid");
                lblNombreUsr.setText(numLicencia);
                refrescarSaldo();
                JOptionPane.showMessageDialog(null, "Conectado a la licencia '" + numLicencia + "' de " + nombre, "Conectado", JOptionPane.INFORMATION_MESSAGE);
                limpiarTxt();
            } else {
                JOptionPane.showMessageDialog(null, "La licencia no existe", "¡ATENCIÓN!", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            System.err.println("ERROR EN BTN UTILIZAR LICENCIA");
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnUtilizarLicenciaMouseClicked

    private void btnAñadirContactoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAñadirContactoMouseClicked
        AñadirNuevoContacto objNC=new AñadirNuevoContacto(0);
        objNC.setVisible(true);
        
    }//GEN-LAST:event_btnAñadirContactoMouseClicked

    private void btnLimpiarNombreCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLimpiarNombreCMouseClicked
        txtNombreContacto.setText("");
    }//GEN-LAST:event_btnLimpiarNombreCMouseClicked

    private void btnLimpiarMovilCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLimpiarMovilCMouseClicked
        txtMovilContacto.setText("");
    }//GEN-LAST:event_btnLimpiarMovilCMouseClicked

    private void btnDesordenarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDesordenarMouseClicked
        tablaContactos.getRowSorter().setSortKeys(null);
    }//GEN-LAST:event_btnDesordenarMouseClicked

    private void tablaContactosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaContactosMouseClicked
        Point point=evt.getPoint();
        int column=tablaContactos.columnAtPoint(point);
        numColumnaABorrar=column;
        columnaABorrar=tablaContactos.getColumnName(column);
        if(column<=2){
            btnBorrarColumna.setText("No puedes borrar la columna \""+columnaABorrar+"\"");
        }else{
            btnBorrarColumna.setText("Borrar columna \""+columnaABorrar+"\"");
        }
        
    }//GEN-LAST:event_tablaContactosMouseClicked

    private void btnEliminarContactoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarContactoMouseClicked
        int yesNoButton = JOptionPane.YES_NO_OPTION;
        int returnVal = JOptionPane.showConfirmDialog(null,
                "El contacto será borrado de forma permanente,¿estás seguro de eliminarlo?", "¡CUIDADO!", yesNoButton);
        if (returnVal == JOptionPane.YES_OPTION) {
            eliminarContacto();
            txtNombreContacto.setText("");
            txtMovilContacto.setText("");
        }
    }//GEN-LAST:event_btnEliminarContactoMouseClicked

    private void txtMovilContactoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMovilContactoKeyTyped
        char enter = evt.getKeyChar();
        if (!(Character.isDigit(enter))) {
            evt.consume();
        }
    }//GEN-LAST:event_txtMovilContactoKeyTyped

    private void btnEscribirContactoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEscribirContactoMouseClicked
        txtAreaMoviles.setText(juntarMovilPrefijo((String) tablaContactos.getValueAt(tablaContactos.getSelectedRow(), 0),(String) tablaContactos.getValueAt(tablaContactos.getSelectedRow(), 2)) + txtAreaMoviles.getText());
        JOptionPane.showMessageDialog(null, "El teléfono se ha escrito en la pestaña \"Enviar\"", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnEscribirContactoMouseClicked

    private void btnCrearGrupoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCrearGrupoMouseClicked
        CrearGrupo objCrearG = new CrearGrupo();
        objCrearG.setVisible(true);
    }//GEN-LAST:event_btnCrearGrupoMouseClicked

    private void btnBorrarGrupoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBorrarGrupoMouseClicked
        int yesNoButton = JOptionPane.YES_NO_OPTION;
        int returnVal = JOptionPane.showConfirmDialog(null,
                "El grupo será borrado de forma permanente,¿estás seguro de eliminarlo?", "¡CUIDADO!", yesNoButton);
        if (returnVal == JOptionPane.YES_OPTION) {
            borrarGrupo();
        }

    }//GEN-LAST:event_btnBorrarGrupoMouseClicked

    private void btnAñadirAlGrupoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAñadirAlGrupoMouseClicked
        añadirAlGrupoSeleccionado(comboAñadirAlGrupo.getSelectedItem().toString());
    }//GEN-LAST:event_btnAñadirAlGrupoMouseClicked

    private void btnEliminarDelGrupoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarDelGrupoMouseClicked
        echarContactoDeGrupo();
    }//GEN-LAST:event_btnEliminarDelGrupoMouseClicked

    private void btnEscribirGrupoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEscribirGrupoMouseClicked
        escribirATodoElGrupo();

    }//GEN-LAST:event_btnEscribirGrupoMouseClicked

    private void txtAreaMovilesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaMovilesKeyTyped
        char enter = evt.getKeyChar();
        if ((Character.isLetter(enter))) {
            evt.consume();
        }
    }//GEN-LAST:event_txtAreaMovilesKeyTyped

    private void btnNuevaPlantillaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNuevaPlantillaMouseClicked
        Plantilla objPla = new Plantilla(0, "", "");
        objPla.setVisible(true);
    }//GEN-LAST:event_btnNuevaPlantillaMouseClicked

    private void btnEliminarPlantillaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarPlantillaMouseClicked
        String nombrePlantilla = (String) tablaPlantillas.getValueAt(tablaPlantillas.getSelectedRow(), 0);
        borrarPlantilla(nombrePlantilla);
        mostrarTablaPlantillas();
    }//GEN-LAST:event_btnEliminarPlantillaMouseClicked

    private void tablaPlantillasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaPlantillasMouseClicked
        txtAreaPlantilla.setText((String) tablaPlantillas.getValueAt(tablaPlantillas.getSelectedRow(), 1));
    }//GEN-LAST:event_tablaPlantillasMouseClicked

    private void btnUtilizarPlantillaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUtilizarPlantillaMouseClicked
        txtAreaMensaje.setText(txtAreaPlantilla.getText());
        JOptionPane.showMessageDialog(null, "La plantilla ha sido aplicada en la pestaña \"Enviar\"", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnUtilizarPlantillaMouseClicked

    private void btnModificarPlantillaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModificarPlantillaMouseClicked
        Plantilla objPla = new Plantilla(1, (String) tablaPlantillas.getValueAt(tablaPlantillas.getSelectedRow(), 0), (String) tablaPlantillas.getValueAt(tablaPlantillas.getSelectedRow(), 1));
        objPla.setVisible(true);
    }//GEN-LAST:event_btnModificarPlantillaMouseClicked

    private void btnAñadirVariableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAñadirVariableMouseClicked
        txtAreaMensaje.insert(comboVariablesTexto.getSelectedItem().toString(), txtAreaMensaje.getCaretPosition());
    }//GEN-LAST:event_btnAñadirVariableMouseClicked

    private void btnModificarContactoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModificarContactoMouseClicked
        AñadirNuevoContacto objNC=new AñadirNuevoContacto(1);
        objNC.setVisible(true);
    }//GEN-LAST:event_btnModificarContactoMouseClicked

    private void btnAñadirColumnaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAñadirColumnaMouseClicked
        NuevaColumna objNCol =new NuevaColumna();
        objNCol.setVisible(true);
    }//GEN-LAST:event_btnAñadirColumnaMouseClicked

    private void btnBorrarColumnaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBorrarColumnaMouseClicked
        if(numColumnaABorrar<=2){
            
        }else{
            int YesNoOption=JOptionPane.YES_NO_OPTION;
            int returnVal=JOptionPane.showConfirmDialog(null,"La columna con todos los datos que hay dentro sera borrada.\nEstas seguro de querer borrarlo? ", "¡CUIDADO!", YesNoOption);
            if(returnVal==JOptionPane.YES_OPTION){
                crearCopiaTabla();
                copiarContenidoEntreTablas();
                borrarT();
                renombrarTablaCopia();
                mostrarDatosTContactos();
                mostrarVariablesCombo(comboVariablesTexto);
            }
        }
    }//GEN-LAST:event_btnBorrarColumnaMouseClicked

    private void btnBuscarMovilMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBuscarMovilMouseClicked
        if(txtMovilContacto.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Debes introducir un número de teléfono","¡ATENCIÓN!",JOptionPane.ERROR_MESSAGE);
        }else{
            if(buscarMovil()==-1){
                if(comboElegirGrupo.getSelectedItem().toString().equals("Todos")){
                    JOptionPane.showMessageDialog(null,"El teléfono que busca nó está en los contactos", "¡ATENCIÓN", JOptionPane.ERROR_MESSAGE);
                }else{
                    JOptionPane.showMessageDialog(null,"El teléfono que busca nó está en \""+comboElegirGrupo.getSelectedItem().toString()+"\"", "¡ATENCIÓN", JOptionPane.ERROR_MESSAGE);
                }
            }else{
                tablaContactos.setRowSelectionInterval(buscarMovil(), buscarMovil());
                scrollToSelectedRow(tablaContactos);
            }
        }
    }//GEN-LAST:event_btnBuscarMovilMouseClicked
    /*
    *
    *
    *Inicio de metodos para el programa
    *
    *
     */

    public String conseguirFecha() {
        String fechaDefinitiva;
        if (CheckEnvioProgramado.isSelected() == true) {
            String fechaString = "" + jCalendar1.getDate();
            String[] fecha = fechaString.split(" ");
            fecha[1] = convertirMes(fecha[1]);
            fechaDefinitiva = (fecha[5] + fecha[1] + fecha[2]
                    + comboHoraEnvio.getItemAt(comboHoraEnvio.getSelectedIndex())
                    + comboMinEnvio.getItemAt(comboMinEnvio.getSelectedIndex())
                    + comboSegEnvio.getItemAt(comboSegEnvio.getSelectedIndex()));
        } else {
            fechaDefinitiva = "00000000000000";
        }
        return fechaDefinitiva;
    }

    public String convertirMes(String fecha1) {
        String mesAux = fecha1;
        switch (mesAux) {
            case "Jan":
                fecha1 = "01";
                break;
            case "Feb":
                fecha1 = "02";
                break;
            case "Mar":
                fecha1 = "03";
                break;
            case "Apr":
                fecha1 = "04";
                break;
            case "May":
                fecha1 = "05";
                break;
            case "Jun":
                fecha1 = "06";
                break;
            case "Jul":
                fecha1 = "07";
                break;
            case "Aug":
                fecha1 = "08";
                break;
            case "Sep":
                fecha1 = "09";
                break;
            case "Oct":
                fecha1 = "10";
                break;
            case "Nov":
                fecha1 = "11";
                break;
            case "Dec":
                fecha1 = "12";
                break;
        }
        return fecha1;
    }

    public static void comprobarCheck() {
        try {
            if (CheckEnvioProgramado.isSelected() == false) {
                comboHoraEnvio.setEnabled(false);
                comboMinEnvio.setEnabled(false);
                comboSegEnvio.setEnabled(false);
                jCalendar1.setEnabled(false);
            } else {
                comboHoraEnvio.setEnabled(true);
                comboMinEnvio.setEnabled(true);
                comboSegEnvio.setEnabled(true);
                jCalendar1.setEnabled(true);
            }
        } catch (Exception e) {
            System.err.println("ERROR EN REFRESCAR SALDO");
        }
    }

    public static void refrescarSaldo() {
        try {
            apiResponseSaldo = semApi.executeBalanceEnquiry();
            lblSaldo.setText("" + apiResponseSaldo.getQuantity());
        } catch (Exception ex) {
            System.err.println("ERROR EN REFRESCAR SALDO");
            Logger.getLogger(Hilo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void crearTablaLicencias() {
        try {
            conectar();
            String sql = "CREATE TABLE IF NOT EXISTS licencias "
                    + "(nlicencia TEXT PRIMARY KEY NOT NULL,"
                    + "usuario TEXT UNIQUE NOT NULL,"
                    + "clave TEXT UNIQUE NOT NULL, "
                    + "nombre TEXT UNIQUE NOT NULL);";
            stmt.executeUpdate(sql);
            c.commit();
            desconectar();
        } catch (SQLException ex) {
            System.err.println("ERROR EN CREAR TABLA LICENCIAS");
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void crearTablaContactos() {
        try {
            conectar();
            String sql = "CREATE TABLE IF NOT EXISTS contactos "
                    + "(Movil TEXT PRIMARY KEY NOT NULL,"
                    + "Nombre TEXT NOT NULL,"
                    + "País TEXT NOT NULL);";
            stmt.executeUpdate(sql);
            c.commit();
            desconectar();
        } catch (SQLException ex) {
            System.err.println("ERROR EN CREAR TABLA CONTACTOS");
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void mostrarDatosTLicencias() {
        DefaultTableModel modelo = (DefaultTableModel) tablaLicencias.getModel();
        try {
            conectar();
            rs = stmt.executeQuery("SELECT * FROM licencias;");
            while (rs.next()) {
                Object[] linea = new Object[4];
                linea[0] = rs.getString("nlicencia");
                linea[1] = rs.getString("usuario");
                linea[2] = rs.getString("clave");
                linea[3] = rs.getString("nombre");
                modelo.addRow(linea);
                tablaLicencias.setModel(modelo);
            }
            desconectar();
        } catch (SQLException e) {
            System.err.println("ERROR EN MOSTRAR DATOS T LICENCIAS");
            System.err.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(0);
        }
    }

    public static void mostrarDatosTContactos() {
        try {
            conectar();
            String sql=consultarSegunGrupo(comboElegirGrupo.getSelectedItem().toString());
            rs=stmt.executeQuery(sql);
            tablaContactos.setModel(resultSetToTableModelUneditable(rs));
            desconectar();
            sustituirNull(tablaContactos);
        } catch (SQLException ex) {
                Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static String consultarSegunGrupo(String nombreGrupo) {
            if (nombreGrupo.equals("Todos")) {
                return "SELECT * FROM contactos;";
            } else {
                return "SELECT * FROM contactos WHERE Movil=(SELECT * FROM " + CrearGrupo.quitarEspacios(nombreGrupo) + " WHERE contactos.Movil=" + CrearGrupo.quitarEspacios(nombreGrupo) + ".Movil);";
            }
    }

    public static void añadirLicencia() {
        try {
            String nlicencia = txtLicencia.getText();
            String usuario = txtUsuario.getText();
            String clave = txtClave.getText();
            String nombre = txtNombre.getText();
            semApi = new SemApi(nlicencia, usuario, clave, "es.servicios.mensario.com", 443);
            apiResponse = semApi.executeSynchronization();
            if(!"".equals(txtLicencia.getText())){
                if (apiResponse.getResult().equals("OK")) {
                    try {
                        conectar();
                        String sql = "INSERT INTO licencias VALUES (" + "'" + nlicencia + "'," + "'" + usuario + "','" + clave + "','" + nombre + "');";
                        stmt.executeUpdate(sql);
                        c.commit();
                        desconectar();
                        DefaultTableModel modelo = (DefaultTableModel) tablaLicencias.getModel();
                        for (int i = 0; i < tablaLicencias.getRowCount(); i++) {
                            modelo.removeRow(i);
                            i -= 1;
                        }
                        mostrarDatosTLicencias();
                        JOptionPane.showMessageDialog(null, "La licencia se añadió correctamente");
                    } catch (HeadlessException | SQLException e) {
                        System.err.println("ERROR EN AÑADIR LICENCIA");
                        JOptionPane.showMessageDialog(null, "No se pudo hacer la inserción debido a que 1 o mas datos ya existen,"
                                + "\nasegúrese de que ingresó los datos correctamente", "¡ATENCIÓN!", JOptionPane.ERROR_MESSAGE);
                    }
                    limpiarTxt();
                } else {
                    JOptionPane.showMessageDialog(null, "La licencia no existe", "¡ATENCIÓN!", JOptionPane.ERROR_MESSAGE);
                }
            }else{
                JOptionPane.showMessageDialog(null, "La licencia no puede estar en blanco", "¡ATENCIÓN!", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static int[] calcularLargoTelf(String nombrePais) {
        int[] num = new int[5];
        switch (nombrePais) {
            case "Alemania":
                num = new int[5];
                num[0] = 10;
                num[1] = 11;
                num[2] = 1;
                return num;
            case "Andorra":
                num = new int[5];
                num[0] = 6;
                num[1] = 6;
                num[2] = 3;
                num[3] = 4;
                num[4] = 6;
                return num;
            case "Austria":
                num = new int[5];
                num[0] = 10;
                num[1] = 10;
                num[2] = 6;
                return num;
            case "Bélgica":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                num[2] = 4;
                return num;
            case "Bosnia":
                num = new int[5];
                num[0] = 8;
                num[1] = 8;
                num[2] = 6;
                return num;
            case "Bulgaria":
                num = new int[5];
                num[0] = 8;
                num[1] = 8;
                num[2] = 87;
                return num;
            case "Chipre":
                num = new int[5];
                num[0] = 8;
                num[1] = 8;
                num[2] = 99;
                return num;
            case "Croacia":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                num[2] = 9;
                return num;
            case "Dinamarca":
                num = new int[5];
                num[0] = 8;
                num[1] = 8;
                return num;
            case "Eslovaquia":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                num[2] = 9;
                return num;
            case "Eslovenia":
                num = new int[5];
                num[0] = 8;
                num[1] = 8;
                return num;
            case "España":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                num[2] = 6;
                num[3] = 7;
                return num;
            case "Estonia":
                num = new int[5];
                num[0] = 7;
                num[1] = 8;
                num[2] = 5;
                num[3] = 8;
                return num;
            case "Finlandia":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                num[2] = 4;
                num[3] = 50;
                return num;
            case "Francia":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                num[2] = 6;
                num[3] = 7;
                return num;
            case "Grecia":
                num = new int[5];
                num[0] = 10;
                num[1] = 10;
                num[2] = 6;
                return num;
            case "Hungría":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                num[2] = 20;
                num[3] = 30;
                num[4] = 70;
                return num;
            case "Irlanda":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                num[2] = 8;
                return num;
            case "Islandia":
                num = new int[5];
                num[0] = 7;
                num[1] = 7;
                return num;
            case "Italia":
                num = new int[5];
                num[0] = 10;
                num[1] = 10;
                num[2] = 3;
                return num;
            case "Letonia":
                num = new int[5];
                num[0] = 8;
                num[1] = 8;
                num[2] = 2;
                return num;
            case "Lituania":
                num = new int[5];
                num[0] = 8;
                num[1] = 8;
                num[2] = 6;
                return num;
            case "Luxemburgo":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                num[2] = 6;
                return num;
            case "Malta":
                num = new int[5];
                num[0] = 8;
                num[1] = 8;
                num[2] = 79;
                num[3] = 99;
                return num;
            case "Montenegro":
                num = new int[5];
                num[0] = 8;
                num[1] = 8;
                num[2] = 6;
                return num;
            case "Noruega":
                num = new int[5];
                num[0] = 8;
                num[1] = 8;
                num[2] = 4;
                num[3] = 9;
                return num;
            case "Países Bajos":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                num[2] = 6;
                return num;
            case "Polonia":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                num[2] = 5;
                num[3] = 6;
                num[4] = 7;
                return num;
            case "Portugal":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                num[2] = 9;
                return num;
            case "Reino Unido":
                num = new int[5];
                num[0] = 10;
                num[1] = 10;
                num[2] = 7;
                return num;
            case "República Checa":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                num[2] = 6;
                num[3] = 7;
                return num;
            case "Rumanía":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                num[2] = 7;
                return num;
            case "Rusia":
                num = new int[5];
                num[0] = 10;
                num[1] = 10;
                num[2] = 9;
                return num;
            case "Serbia-Kosovo":
                num = new int[5];
                num[0] = 8;
                num[1] = 9;
                num[2] = 6;
                return num;
            case "Suecia":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                num[2] = 7;
                return num;
            case "Suiza":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                num[2] = 7;
                return num;
            case "Turquía":
                num = new int[5];
                num[0] = 10;
                num[1] = 10;
                num[2] = 5;
                return num;
            case "Ucrania":
                num = new int[5];
                num[0] = 9;
                num[1] = 9;
                return num;
        }
        return num;
    }

    public static String transformarPais(String nombrePais) {
        switch (nombrePais) {
            case "Alemania":
                return "49/";
            case "Andorra":
                return "376/";
            case "Austria":
                return "43/";
            case "Bélgica":
                return "32/";
            case "Bosnia":
                return "387/";
            case "Bulgaria":
                return "359/";
            case "Chipre":
                return "357/";
            case "Croacia":
                return "385/";
            case "Dinamarca":
                return "45/";
            case "Eslovaquia":
                return "421/";
            case "Eslovenia":
                return "386/";
            case "España":
                return "34/";
            case "Estonia":
                return "372/";
            case "Finlandia":
                return "352/";
            case "Francia":
                return "33/";
            case "Grecia":
                return "30/";
            case "Hungría":
                return "36/";
            case "Irlanda":
                return "353/";
            case "Islandia":
                return "354/";
            case "Italia":
                return "39/";
            case "Letonia":
                return "371/";
            case "Lituania":
                return "370/";
            case "Luxemburgo":
                return "32/";
            case "Malta":
                return "356/";
            case "Montenegro":
                return "382/";
            case "Noruega":
                return "47/";
            case "Países Bajos":
                return "31/";
            case "Polonia":
                return "48/";
            case "Portugal":
                return "351/";
            case "Reino Unido":
                return "44/";
            case "República Checa":
                return "420/";
            case "Rumanía":
                return "40/";
            case "Rusia":
                return "7/";
            case "Serbia-Kosovo":
                return "381/";
            case "Suecia":
                return "46/";
            case "Suiza":
                return "41/";
            case "Turquía":
                return "90/";
            case "Ucrania":
                return "380/";
        }
        return "";
    }

    public static void seleccionarLineaLicencias() {
        if (tablaLicencias.getSelectedRow() != -1) {
            txtLicencia.setText((String) tablaLicencias.getValueAt(tablaLicencias.getSelectedRow(), 0));
            txtUsuario.setText((String) tablaLicencias.getValueAt(tablaLicencias.getSelectedRow(), 1));
            txtClave.setText((String) tablaLicencias.getValueAt(tablaLicencias.getSelectedRow(), 2));
            txtNombre.setText((String) tablaLicencias.getValueAt(tablaLicencias.getSelectedRow(), 3));
        }
    }

    public static void seleccionarLineaContactos() {
        if (tablaContactos.getSelectedRow() != -1) {
            txtNombreContacto.setText((String) tablaContactos.getValueAt(tablaContactos.getSelectedRow(), 1));
            txtMovilContacto.setText((String) tablaContactos.getValueAt(tablaContactos.getSelectedRow(), 0));
            comboPais.setSelectedItem((String) tablaContactos.getValueAt(tablaContactos.getSelectedRow(), 2));
        }
    }

    public static void eliminarLicencia() {
        String licencia = txtLicencia.getText();
        if (!"".equals(licencia)) {
            try {
                conectar();
                String sql = "DELETE from licencias where nlicencia='" + licencia + "';";
                stmt.executeUpdate(sql);
                c.commit();
                desconectar();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "No existe esa licencia,compruebe si está bien escrita", "¡ATENCIÓN!", JOptionPane.ERROR_MESSAGE);
            }
            DefaultTableModel modelo = (DefaultTableModel) tablaLicencias.getModel();
            modelo.removeRow(tablaLicencias.getSelectedRow());
        } else {
            JOptionPane.showMessageDialog(null, "Debes elegir una licencia a borrar", "¡ATENCIÓN!", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void eliminarContacto() {
        String movil = (String) tablaContactos.getValueAt(tablaContactos.getSelectedRow(), 0);
        if (!"".equals(movil)) {
            try {
                ArrayList<String>gruposArrayList=new ArrayList<String>();
                conectar();
                String sql="SELECT * FROM grupos;";
                rs=stmt.executeQuery(sql);
                while(rs.next()){
                    gruposArrayList.add(rs.getString(1));
                }
                rs.close();
                Object[]gruposArray=gruposArrayList.toArray();
                String sql2 = "DELETE from contactos where Movil='" + movil + "';";
                stmt.executeUpdate(sql2);
                c.commit();
                String sql3="";
                String sql4="";
                for(int i=0;i<gruposArray.length;i++){
                    sql3="Select * from "+gruposArray[i]+" WHERE Movil='"+movil+"';";
                    rs=stmt.executeQuery(sql3);
                    if(rs.next()){
                        sql4="DELETE FROM "+gruposArray[i]+" WHERE Movil='"+movil+"';";
                        stmt.executeUpdate(sql4);
                        c.commit();
                    }
                }
                desconectar();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "No existe ese contacto,compruebe si está bien escrito", "¡ATENCIÓN!", JOptionPane.ERROR_MESSAGE);
            }
            DefaultTableModel modelo = (DefaultTableModel) tablaContactos.getModel();
            modelo.removeRow(tablaContactos.getSelectedRow());
        } else {
            JOptionPane.showMessageDialog(null, "Debes elegir una movil a borrar", "¡ATENCIÓN!", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void limpiarTxt() {
        txtLicencia.setText("");
        txtUsuario.setText("");
        txtClave.setText("");
        txtNombre.setText("");
    }

    public static String cambiarCaracteres(String mensaje) {
        String aux = mensaje.replace("á", "à");
        aux = aux.replace("í", "ì");
        aux = aux.replace("ó", "ò");
        aux = aux.replace("ú", "ù");
        return aux;
    }
    
    public static String cambiarCaracteres2(String mensaje){
        String aux = mensaje.replace("à", "á");
        aux = aux.replace("ì", "í");
        aux = aux.replace("ò", "ó");
        aux = aux.replace("ù", "ú");
        return aux;
    }

    public static boolean comprobarGSM(String mensaje) {
        char[] charArray = mensaje.toCharArray();
        for (int i = 0; i < charArray.length; i++) {
            if (alfabetoGSM.indexOf(charArray[i]) < 0) {
                return false;
            }
        }
        return true;
    }

    public static boolean comprobarRemitente(String remitente) {
        char[] charArray = remitente.toCharArray();
        for (int i = 0; i < charArray.length; i++) {
            if (alfabetoRemitente.indexOf(charArray[i]) < 0) {
                return false;
            }
        }
        return true;
    }

    public static String juntarMovilPrefijo(String movil,String pais) {
            String movilPref = transformarPais(pais) + movil + ",";
            return movilPref;
    }

    public static void borrarGrupo() {
        if (!"Todos".equals(comboElegirGrupo.getSelectedItem().toString())) {
            try {
                conectar();
                String sql = "DELETE FROM grupos where nGrupo='" + comboElegirGrupo.getSelectedItem().toString() + "';";
                stmt.executeUpdate(sql);
                c.commit();
                sql = "DROP TABLE IF EXISTS " + quitarEspacios(comboElegirGrupo.getSelectedItem().toString()) + ";";
                stmt.executeUpdate(sql);
                c.commit();
                desconectar();
                mostrarGruposCombo();
                mostrarDatosTContactos();
            } catch (SQLException ex) {
                System.err.println("ERROR EN BORRAR GRUPO");
                Logger.getLogger(CrearGrupo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "El grupo \"Todos\" no puede ser borrado", "¡ATENCIÓN!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public static boolean comprobarRegistro(String existMovil) {
        try {
            conectar();

            String sql = "SELECT * FROM contactos WHERE Movil='" + existMovil + "';";
            rs = stmt.executeQuery(sql);
            if (rs.next()) {
                rs.close();
                stmt.close();
                c.close();
                return true;
            }
            desconectar();
        } catch (SQLException ex) {
            System.err.println("ERROR EN COMPROBAR REGISTRO");
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }

        return false;
    }

    public static void añadirAlGrupoSeleccionado(String grupoS) {
        if(!"Todos".equals(comboAñadirAlGrupo.getSelectedItem().toString())){
            if (tablaContactos.getSelectedRowCount() > 0) {
                int selectedRow[] = tablaContactos.getSelectedRows();
                for (int i = 0;i<selectedRow.length;i++) {
                    String movil = tablaContactos.getValueAt(selectedRow[i], 0).toString();
                    if (comprobarRegistro(movil) == true) {
                        if (comprobarSiEstaEnNuevoGrupo(movil) == true) {
                            try {
                                conectar();
                                String sql = "INSERT INTO " + quitarEspacios(grupoS) + " VALUES('" + movil + "')";
                                stmt.executeUpdate(sql);
                                System.out.println("El contacto se ha agregado al grupo " + grupoS + " con exito");

                                c.commit();
                                desconectar();
                            } catch (SQLException ex) {
                                Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, txtNombreContacto.getText() + " ya está en "
                                    + comboAñadirAlGrupo.getSelectedItem().toString(), "¡ATENCIÓN!", JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "El contacto no está registrado", "¡ATENCIÓN!", JOptionPane.ERROR_MESSAGE);
                    }
                }
                JOptionPane.showMessageDialog(null,"Los contactos se han agregado al grupo "+grupoS+" con exito");
            }
        }else{
            JOptionPane.showMessageDialog(null,"Los contactos ya estan en \"Todos\"");
        }
    }

    public static boolean comprobarSiEstaEnNuevoGrupo(String auxMovil) {
        String auxNuevoGrupo = quitarEspacios(comboAñadirAlGrupo.getSelectedItem().toString());
        try {
            conectar();
            String sql = "SELECT * FROM " + auxNuevoGrupo + " WHERE Movil='" + auxMovil + "';";
            rs = stmt.executeQuery(sql);
            if (rs.next()) {
                desconectar();
                return false;
            }
            desconectar();
        } catch (SQLException ex) {
            System.err.println("ERROR EN COMPROBAR SI ESTA EN NUEVO GRUPO");
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;
    }

    public static void echarContactoDeGrupo() {
        String auxGrupo = comboElegirGrupo.getSelectedItem().toString();
        if (!"Todos".equals(auxGrupo)) {
            int yesNoButton = JOptionPane.YES_NO_OPTION;
            int returnVal = JOptionPane.showConfirmDialog(null,
                "Estas seguro de querer echar a estos contactos de " + auxGrupo + "?", "¡CUIDADO!", yesNoButton);
            if (returnVal == JOptionPane.YES_OPTION) {
                if (tablaContactos.getSelectedRowCount() > 0) {
                    int selectedRowI[] = tablaContactos.getSelectedRows();
                    String selectedRowS[] = new String[selectedRowI.length];
                    for (int i = 0;i<selectedRowI.length;i++) {
                        String auxMovilC = tablaContactos.getValueAt(selectedRowI[i], 0).toString();
                        selectedRowS[i]=auxMovilC;
                    }
                    for (String selectedRowS1 : selectedRowS) {
                        String auxGrupoSQL = quitarEspacios(auxGrupo);
                        try {
                            conectar();
                            String sql = "DELETE FROM " + auxGrupoSQL + " WHERE Movil='" + selectedRowS1 + "';";
                            stmt.executeUpdate(sql);
                            c.commit();
                            desconectar();
                            mostrarDatosTContactos();
                        }catch (SQLException ex) {
                            System.err.println("ERROR EN ECHAR CONTACTO DE GRUPO");
                            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    } else {
                        JOptionPane.showMessageDialog(null, "No se ha seleccionado ningún contacto.", "¡ATENCIÓN!", JOptionPane.ERROR_MESSAGE);
                    }
                JOptionPane.showMessageDialog(null,"Los contactos seleccionados se han echado del grupo "+auxGrupo+" correctamente");
            }
        }else{
            JOptionPane.showMessageDialog(null, "No se puede echar a nadie de \"Todos\",si quieres puedes eliminarlo.", "¡ATENCIÓN!", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void escribirATodoElGrupo() {
        String auxGrupo = comboElegirGrupo.getSelectedItem().toString();
        String auxGrupoSQL = CrearGrupo.quitarEspacios(auxGrupo);
        try {
            conectar();
            String sql = consultarSegunGrupo(auxGrupoSQL);
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                String movil = rs.getString("Movil");
                String pais=rs.getString("Paìs");
                txtAreaMoviles.setText(juntarMovilPrefijo(movil,pais) + txtAreaMoviles.getText());
            }
            desconectar();
            JOptionPane.showMessageDialog(null, "Se ha escrito el teléfono de todo el grupo \"" + auxGrupo + "\" en la pestaña \"Enviar\"", "Información", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            System.err.println("ERROR EN ESCRIBIR A TODO EL GRUPO");
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static String cambiarPorNombre(String telefono, String variable) {
        String retornable = "";
        try {
            conectar();
            String sql = "SELECT * FROM contactos WHERE Movil='" + telefono + "';";
            rs = stmt.executeQuery(sql);
                retornable = rs.getString(variable);
            desconectar();

        } catch (SQLException ex) {
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }
        return retornable;
    }

    public static void conectar() {
        try {
            c = null;
            stmt = null;
            rs = null;
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:jmensario.db");
            c.setAutoCommit(false);
            stmt = c.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static void desconectar() {
        try {
            if (rs != null) {
                rs.close();
            }
            stmt.close();
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static void borrarT() {
        try {
            conectar();
            String sql = "DROP TABLE IF EXISTS contactos";
            stmt.executeUpdate(sql);
            c.commit();
            desconectar();
        } catch (SQLException ex) {
            System.err.println("ERROR EN borrar tabla contactos");
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static void añadirColumna(String nombreColumna){
        try {
            conectar();
            String sql="ALTER TABLE contactos ADD "+nombreColumna+" TEXT;";
            stmt.executeUpdate(sql);
            c.commit();
            desconectar();
        } catch (SQLException ex) {
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static TableModel resultSetToTableModelUneditable(ResultSet rs) {
	try {
	    ResultSetMetaData metaData = rs.getMetaData();
	    int numberOfColumns = metaData.getColumnCount();
	    Vector<String> columnNames = new Vector<String>();

	    // Get the column names
	    for (int column = 0; column < numberOfColumns; column++) {
		columnNames.addElement(metaData.getColumnLabel(column + 1));
	    }

	    // Get all rows.
	    Vector<Vector<Object>> rows = new Vector<Vector<Object>>();

	    while (rs.next()) {
		Vector<Object> newRow = new Vector<Object>();

		for (int i = 1; i <= numberOfColumns; i++) {
		    newRow.addElement(rs.getObject(i));
		}

		rows.addElement(newRow);
	    }

	    return new DefaultTableModel(rows, columnNames){
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
	} catch (Exception e) {
	    e.printStackTrace();

	    return null;
	}
    }
    
    public static TableModel resultSetToTableModel(ResultSet rs) {
	try {
	    ResultSetMetaData metaData = rs.getMetaData();
	    int numberOfColumns = metaData.getColumnCount();
	    Vector<String> columnNames = new Vector<String>();

	    // Get the column names
	    for (int column = 0; column < numberOfColumns; column++) {
		columnNames.addElement(metaData.getColumnLabel(column + 1));
	    }

	    // Get all rows.
	    Vector<Vector<Object>> rows = new Vector<Vector<Object>>();

	    while (rs.next()) {
		Vector<Object> newRow = new Vector<Object>();

		for (int i = 1; i <= numberOfColumns; i++) {
		    newRow.addElement(rs.getObject(i));
		}

		rows.addElement(newRow);
	    }

	    return new DefaultTableModel(rows, columnNames);
	} catch (Exception e) {
	    e.printStackTrace();

	    return null;
	}
    }
    
    public static void crearCopiaTabla(){
        try {
            conectar();
            String sql="CREATE TABLE IF NOT EXISTS copia "+datosCrearCopiaTabla();
            stmt.executeUpdate(sql);
            c.commit();
            desconectar();
        } catch (SQLException ex) {
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    public static String datosCrearCopiaTabla(){
        String aux="";
        for(int i=0;i<tablaContactos.getColumnCount();i++){
            if(i==0){
                aux="("+(String)tablaContactos.getColumnName(i)+" TEXT PRIMARY KEY NOT NULL";
            }else if(i==1||i==2){
                aux=aux+","+(String)tablaContactos.getColumnName(i)+" TEXT NOT NULL";
            }else if(i==numColumnaABorrar&&i==tablaContactos.getColumnCount()-1){
                aux=aux+");";
            }else if(i==numColumnaABorrar&&i!=tablaContactos.getColumnCount()-1){
                
            }else if(i!=numColumnaABorrar&&i==tablaContactos.getColumnCount()-1){
                aux=aux+","+(String)tablaContactos.getColumnName(i)+" TEXT);";
            }else{
                aux=aux+","+(String)tablaContactos.getColumnName(i)+" TEXT";
            }
        }
        return aux;
    }
    
    public static String datosCopiaTabla(){
        String aux="";
        for(int i=0;i<tablaContactos.getColumnCount();i++){
            if(i==0){
                aux=(String)tablaContactos.getColumnName(i);
            }else if(i==numColumnaABorrar){
               
            }else{
                aux=aux+","+(String)tablaContactos.getColumnName(i);
            }
        }
        return aux;
    }
    
    public static void copiarContenidoEntreTablas(){
        try {
            conectar();
            String sql="INSERT INTO copia("+datosCopiaTabla()+") SELECT "+datosCopiaTabla()+" FROM contactos;";
            
            stmt.executeUpdate(sql);
            c.commit();
            desconectar();
            
        } catch (SQLException ex) {
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }    
    }
    
    public static void renombrarTablaCopia(){
        try {
            conectar();
            String sql="ALTER TABLE copia RENAME TO contactos;";
            stmt.executeUpdate(sql);
            c.commit();
            desconectar();
        } catch (SQLException ex) {
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    public static void sustituirNull(JTable tabla){
        try{
            int auxNumCol=tabla.getColumnCount();
            for(int row=0;row<tabla.getRowCount();row++){
                for(int col=0;col<tabla.getColumnCount();col++){
                    String aux=(String) tabla.getValueAt(row, col);
                    if(aux.equals("null")){
                        tabla.setValueAt(" ", row, col);
                    }
                }
            }
        }catch(Exception ex){
            
        }
    }
    public static int buscarMovil(){
        for(int i=0;i<tablaContactos.getRowCount();i++){
            String aux=(String) tablaContactos.getValueAt(i, 0);
            if(aux.equals(txtMovilContacto.getText())){
                return i;
            }
        }
        return -1;
    }
    public static int buscarLicencia(){
        for(int i=0;i<tablaLicencias.getRowCount();i++){
            String aux=(String) tablaLicencias.getValueAt(i, 3);
            if(aux.equals(txtNombre.getText())){
                return i;
            }
        }
        return -1;
    }
    
    public static void mostrarVariablesCombo(JComboBox combo){
        try {
            conectar();
            String sql="PRAGMA table_info(contactos);";
            combo.removeAllItems();
            rs=stmt.executeQuery(sql);
            while(rs.next()){
                combo.addItem("{#"+rs.getString(2)+"}");
            }
            desconectar();
        } catch (SQLException ex) {
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static HashMap<String,String> crearHashmap(HashMap<String, String> hmap,String movil){
        for(int i=0;i<comboVariablesTexto.getItemCount();i++){
            hmap.put(cambiarCaracteres(separarItem(comboVariablesTexto.getItemAt(i))),cambiarPorNombre(movil, separarItem(comboVariablesTexto.getItemAt(i))));
        }
        return hmap;
    }
    
    public static String separarItem(String item){
        String itemCambiado=item.replace("{#", "");
        String itemCambiado2=itemCambiado.replaceAll("}", "");
                
        return itemCambiado2;
    }
    
    public static void soutTabla(String nTabla){
        try {
            conectar();
            String sql="SELECT * FROM "+nTabla+";";
            rs=stmt.executeQuery(sql);
            while(rs.next()){
                System.out.println(rs.getString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Envios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public static void scrollToSelectedRow(JTable table){
        JViewport viewport = (JViewport) table.getParent();
        Rectangle cellRectangle = table.getCellRect(table.getSelectedRow(), 0, true);
        Rectangle visibleRectangle = viewport.getVisibleRect();
        table.scrollRectToVisible(new Rectangle(cellRectangle.x, cellRectangle.y, (int) visibleRectangle.getWidth(), (int) visibleRectangle.getHeight()));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Envios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Envios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Envios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Envios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Envios().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JCheckBox CheckEnvioProgramado;
    private javax.swing.JInternalFrame IFContactos;
    private javax.swing.JInternalFrame IFDestinatario;
    private javax.swing.JInternalFrame IFMensaje;
    private javax.swing.JTabbedPane TPEscribirSms;
    public static javax.swing.JButton btnAñadirAlGrupo;
    private javax.swing.JButton btnAñadirColumna;
    public static javax.swing.JButton btnAñadirContacto;
    private javax.swing.JButton btnAñadirLicencia;
    private javax.swing.JButton btnAñadirVariable;
    private javax.swing.JButton btnBorrarColumna;
    private javax.swing.JButton btnBorrarGrupo;
    private javax.swing.JButton btnBuscarLicencia;
    private javax.swing.JButton btnBuscarMovil;
    private javax.swing.JButton btnCrearGrupo;
    private javax.swing.JButton btnDesordenar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnEliminarContacto;
    private javax.swing.JButton btnEliminarDelGrupo;
    private javax.swing.JButton btnEliminarMoviles;
    private javax.swing.JButton btnEliminarPlantilla;
    private javax.swing.JButton btnEliminarTexto;
    public static javax.swing.JButton btnEnviar;
    public static javax.swing.JButton btnEscribirContacto;
    private javax.swing.JButton btnEscribirGrupo;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnLimpiarMovilC;
    private javax.swing.JButton btnLimpiarNombreC;
    public static javax.swing.JButton btnModificarContacto;
    private javax.swing.JButton btnModificarPlantilla;
    private javax.swing.JButton btnNuevaPlantilla;
    private javax.swing.JButton btnUtilizarLicencia;
    private javax.swing.JButton btnUtilizarPlantilla;
    public static javax.swing.JComboBox<String> comboAñadirAlGrupo;
    public static javax.swing.JComboBox<String> comboElegirGrupo;
    public static javax.swing.JComboBox<String> comboHoraEnvio;
    public static javax.swing.JComboBox<String> comboMinEnvio;
    public static javax.swing.JComboBox<String> comboPais;
    public static javax.swing.JComboBox<String> comboSegEnvio;
    public static javax.swing.JComboBox<String> comboVariablesTexto;
    public static com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JScrollPane jScrollPaneMoviles;
    private javax.swing.JScrollPane jScrollPaneTablaPlantillas;
    private javax.swing.JScrollPane jScrollPaneTexto;
    private javax.swing.JScrollPane jScrollPaneTextoPlantilla;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblClave;
    private javax.swing.JLabel lblHoraEnvio;
    private javax.swing.JLabel lblLicencia;
    private javax.swing.JLabel lblMovil;
    private javax.swing.JLabel lblMoviles;
    public static javax.swing.JLabel lblMovilesInsertados;
    private javax.swing.JLabel lblMovilesInsertadosName;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblNombreContacto;
    private javax.swing.JLabel lblNombreRemitente;
    private javax.swing.JLabel lblNombreTabla;
    public static javax.swing.JLabel lblNombreUsr;
    public static javax.swing.JLabel lblNumCaracteres;
    private javax.swing.JLabel lblNumCaracteresName;
    public static javax.swing.JLabel lblNumMensajes;
    private javax.swing.JLabel lblNumMensajesName;
    private javax.swing.JLabel lblPais;
    public static javax.swing.JLabel lblSaldo;
    private javax.swing.JLabel lblSaldoName;
    private javax.swing.JLabel lblTexto;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JPanel panelContactos;
    private javax.swing.JPanel panelEnvios;
    private javax.swing.JPanel panelLicencias;
    private javax.swing.JPanel panelPlantillas;
    private javax.swing.JScrollPane scrollContactos;
    private javax.swing.JScrollPane scrollTable;
    public static javax.swing.JTable tablaContactos;
    public static javax.swing.JTable tablaLicencias;
    public static javax.swing.JTable tablaPlantillas;
    public static javax.swing.JTextArea txtAreaMensaje;
    public static javax.swing.JTextArea txtAreaMoviles;
    public static javax.swing.JTextArea txtAreaPlantilla;
    public static javax.swing.JTextField txtClave;
    public static javax.swing.JTextField txtLicencia;
    public static javax.swing.JTextField txtMovilContacto;
    public static javax.swing.JTextField txtNombre;
    public static javax.swing.JTextField txtNombreContacto;
    private javax.swing.JTextField txtNombreRemitente;
    public static javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
